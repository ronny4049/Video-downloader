export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
export PATH=$JAVA_HOME/bin:$PATH

export auto_dir=`pwd`
mkdir logs
env > env.txt
export logs_dir=${auto_dir}/logs
echo "Test run could not start!" > results.txt

echo "installing automation requirements"
pip3 install pip --upgrade > ${logs_dir}/python_pip_upgrade.txt 2>&1
pip3 install --user -r requirements.txt > ${logs_dir}/python_pip_requirements_install.txt 2>&1
echo "automation requirements finished installing"

if echo "$MVRETAIL_BRANCH" | grep -q "excludeci"; then
    echo "Branch contains excludeci keyword. No Automation Test runs against this branch!!"
    exit 0
else
    echo "Proceed with running Automation Test runs against this branch!!"
fi

readlink /proc/$$/exe
echo java: `which java`
echo php version: `php --version`
echo chromedriver version: `chromedriver --version`
echo googlechrome version: `google-chrome --version`
echo "127.0.0.1	macdev2.mvretail.com" | sudo tee -a /etc/hosts


if [ $RUN_AMP = true ]; then
export GRADLE_OPT="-Xmx6G"
git clone --depth 1 git@github.com:MoVista/MVNEXT.git --branch $MVNEXT_BRANCH --single-branch

export SENTRY_DISABLE_AUTO_UPLOAD=true
echo "Starting Building apk!!"
# temp fix on permissions issues here
sudo chown -R root:jenkins /opt/android
sudo chmod -R 775 /opt/android
      
# Change the gradle.properties file to use the keys 
# define as environment variables and use with export here
export ORG_GRADLE_PROJECT_RELEASE_STORE_KEY_ALIAS=MVAndroidKey ORG_GRADLE_PROJECT_RELEASE_STORE_FILE=MVNEXT_Release ORG_GRADLE_PROJECT_RELEASE_STORE_PASSWORD=$MVNEXT_RELEASE_KEY ORG_GRADLE_PROJECT_RELEASE_KEY_PASSWORD=$MVNEXT_RELEASE_KEY ORG_GRADLE_PROJECT_BACKGROUND_GEOLOCATION_LIB_KEY=$MVNEXT_GEO_LOCATION_KEY
# Modify the XML file to get rid of acess_background_location permission
#cp MVNEXT/android/app/src/main/AndroidManifest.xml AM_Before.xml
    
#python3 scripts/remove_amp_location_restrictions.py MVNEXT/android/app/src/main/AndroidManifest.xml
python3 scripts/replace_line.py MVNEXT/android/gradle.properties "org.gradle.jvmargs=-Xmx2048m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8" "org.gradle.jvmargs=-Xmx4096m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8"

#cp MVNEXT/android/app/src/main/AndroidManifest.xml AM_After.xml
#python3 scripts/remove_amp_location_restrictions.py AM_After.xml
# Build the app
cd MVNEXT
sudo npm install --global yarn  > ${logs_dir}/yarn_global_module_install.txt 2>&1

#--
yarn install > ${logs_dir}/yarn_install_output.txt 2>&1
yarn react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/build/intermediates/res/merged/release/ > ${logs_dir}/yarn_asset_bundle.txt 2>&1
cd android     
./gradlew assembleRelease > ${logs_dir}/gradle_assemble_release.txt 2>&1
#--
echo App build completed!!
      
cd $auto_dir
cp MVNEXT/android/app/build/outputs/apk/amp/release/app-amp-release.apk .
export apk_path=${auto_dir}/app-amp-release.apk
sudo chmod 444 $apk_path

#echo 'Downloading APK!'
#curl -o app-amp-release.apk https://dev-jenkins.mvretail.com/job/automation/job/automaton/26892/artifact/app-amp-release.apk

#if [ -f app-amp-release.apk ]; then
#	echo "APK download successfull!"
    
#else 
#	echo "APK download failed"
#	exit 1
#fi    

#export apk_path=${auto_dir}/app-amp-release.apk
#sudo chmod 444 $apk_path
fi

# get mvretail and simplesamlphp and put them in their place
echo "cloning mvretail and simplesamlphp"
git clone --depth 1 git@github.com:MoVista/MVRetail.git --branch $MVRETAIL_BRANCH --single-branch > ${logs_dir}/git_mvretail_log.txt 2>&1
git clone --depth 1 git@github.com:MoVista/SimpleSAMLphp.git --branch master --single-branch > ${logs_dir}/git_simplesamlphp_log.txt 2>&1
mv SimpleSAMLphp simplesamlphp

sudo cp -r MVRetail /var/www/
sudo cp -r simplesamlphp /var/

echo "installing loguru dependency"
# retrieve react assets from mcp source <-> github actions
export MCP_URL=https://devw-bastion-internal.mvretail.com

python3 get_ui_artifacts.py > ${logs_dir}/get_ui_artifacts_log.txt

if [ -f assets.zip ]; then
  # decompress asset zip into expected location
  echo "assets downloaded, decompressing..."
  sudo unzip assets.zip -d /var/www/MVRetail/main > ${logs_dir}/decompress_assets.txt 2>&1
  echo "assets decompressed"
else
  echo "assets.zip could not be found! could not retrieve compiled web assets from mcp/gha, aborting the automation run"
  exit 1
fi

sudo chmod -R 777 /var/www/MVRetail/assets
sudo chown -R www-data /var/www/MVRetail/assets

# start required services in instance
sudo service mariadb start
sudo service apache2 start
sudo service redis-server start

# run sql dump files that define db and user and table schema used in seed data so far
sudo cp container/web/_ss_environment.php /var/www/
sudo mysql < container/mariadb/initdb.d/01-databases.sql
sudo mysql < container/mariadb/initdb.d/02-timezones.sql
sudo mysql vmsite < seed_data/mvretail_schema.sql

export sql_address=macdev2.mvretail.com
export mvretail_sql_database=vmsite
export common_sql_database=vmsiteCommon
export messaging_sql_database=vmsite_msgCore
export LOGURU_LEVEL=INFO
export headless=True
export screenshots=True
export PYTHONPATH=.
export url=https://macdev2.mvretail.com
export device_farm_address=http://dev-app6.mvretail.com:7106/api/v1
export device_farm_token=52afad51681b41628ab151e719caddac35502e9325ed4425ad586b222e4863aa
export run_mobile_tests=True
export use_mobile_device_farm=True
export use_broker_as_proxy_intermediary=True
export broker_ssh_user=jenkins_service
export timeout=20

echo "starting threaded automated test run"
python run_all.py
echo $?
